 services:
   rabbitmq:
     image: rabbitmq:3-management
     container_name: rabbitmq_management    
     ports: 
      - 5672:5672 # (erlang) communication between the nodes and CLI tool
      - 15672:15672 # communication with the web management API 
    
     volumes:
     - C:\dados\volumes\sqlserver\Fiap_Fase1_TechChallenge_Contatos:/var/lib/rabbitmq/
     environment:
      RABBITMQ_DEFAULT_USER: guest
      RABBITMQ_DEFAULT_PASS: guest
     networks:
       - minha-rede
   
   db:
     user: root
     image: mcr.microsoft.com/mssql/server:2019-latest
     environment:
       ACCEPT_EULA: "Y"
       SA_PASSWORD: "sql@123456"
       MSSQL_PID: Express
     ports:
       - "1433:1433"
     volumes:
       - C:\dados\volumes\sqlserver\Fiap_Fase1_TechChallenge_Contatos:/var/opt/mssql/data
     networks:
       - minha-rede
   
   redis:
    image: redis:latest
    ports:
      - "6379:6379"
    networks:
      - minha-rede
   
   consulting.api:
    image: ${DOCKER_REGISTRY-}consultingapi
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./consulting-api/regional-contacts-consulting-api/src/Consulting.Api/Dockerfile    
    ports:
      - "5001:80"
    depends_on:
      - db
      - redis
    networks:
       - minha-rede

   create.api:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./create-api/regional-contacts-api-create/src/Create.Api/Dockerfile    
    ports:
      - "5002:80"
    depends_on:
      - consulting.api
      - rabbitmq
    networks:
       - minha-rede   

   update.api:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./update-api/regional-contacts-api-update/src/Update.Api/Dockerfile    
    ports:
      - "5003:80"
    depends_on:
      - consulting.api
      - rabbitmq
    networks:
       - minha-rede        

   delete.api:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./delete-api/regional-contacts-api-delete/src/Delete.Api/Dockerfile    
    ports:
      - "5004:80"
    depends_on:
      - consulting.api
      - rabbitmq
      - db
    networks:
       - minha-rede  

   worker.create:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./create-worker/regional-contacts-worker-create/src/Create.Worker/Dockerfile    
    ports:
      - "5005:80"
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
       - minha-rede 

   worker.delete:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./delete-worker/regional-contacts-worker-delete/src/Delete.Worker/Dockerfile    
    ports:
      - "5006:80"
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
       - minha-rede 

   worker.update:
    environment:
      - ASPNETCORE_URLS=http://+:80
    build:
      context: .
      dockerfile: ./update-worker/regional-contacts-worker-update/src/Update.Worker/Dockerfile    
    ports:
      - "5007:80"
    depends_on:
      - db
      - rabbitmq
      - redis
    networks:
       - minha-rede 
   
   prometheus:
    image: prom/prometheus
    container_name: prometheus_grafprom
    restart: always
    networks:
        - minha-rede
    ports:
      - 9090:9090
    volumes:
      - ./prometheus/prometheus.yml:/etc/prometheus/prometheus.yml:ro
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:9090/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s

   node-exporter:
    image: prom/node-exporter
    networks:
      - minha-rede
    ports:
      - 9100:9100

   grafana:
    container_name: grafana
    image: grafana/grafana:master
    networks:
     - minha-rede
    ports:
      - "3000:3000"
    volumes:
        - ./grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
        - ./grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
    depends_on:
        prometheus:
            condition: service_healthy
    healthcheck:
        test: wget -q --tries=1 -O- http://localhost:3000/
        interval: 3s
        timeout: 3s
        retries: 10
        start_period: 10s


 networks:
   minha-rede:

 volumes:
   db-data: